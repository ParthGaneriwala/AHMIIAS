package Types_Constants
public
	with Base_Types;
	with Data_Model;

	-------------------------------------
	-- Constants
	-------------------------------------
	annex agree {**
		const NIL : int = 0;	
	**};

	-------------------------------------
	-- Data Types
	-------------------------------------

	-- NOTE: for numerical thresholds and determination of error ranges see Unreliable_Sensor_lib.aadl
	data SensorErrorRange
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("Normal", "Level1", "Level2", "Safety");
	end SensorErrorRange;

	-- NOTE: component 'reliable' necessary due to the choice of having a data port, rather than an event data port, for denoting the  
	--       presence/absence of an unreliability alert communication to the operator		
	data SensorErrorData
	end SensorErrorData;

	data implementation SensorErrorData.impl
		subcomponents
			error:			 data Base_Types::Float;
			errorRange:		 data SensorErrorRange;
			reliable: 	 data Base_Types::Boolean;
	end SensorErrorData.impl;

	-- NOTE: value "Neutral" necessary due to the choice of having a data port, rather than an event data port, for denoting no response in absence of 
	--       an alert communication to the operator
	data Response
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("Agree", "Disagree", "Neutral");
	end Response;
	
	data Phase_Type
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("On_Ground", "In_Flight", "Landing");
	end Phase_Type;
	
	data H2I
	end H2I;
	
	data implementation H2I.impl
		subcomponents
			activeSensorUnreliableResponse: data Response;
			Initiate_Landing:				data Base_Types::Boolean;
			Abort_Landing:					data Base_Types::Boolean;
			Landing_Option_Selection:		data Base_Types::Integer;	
	end H2I.impl;
	
	data I2H
	end I2H;
	
	data implementation I2H.impl
		subcomponents
			activeSensorErrorData:  	data SensorErrorData.impl;
			Active_Sensor:				data Base_Types::Integer;
			Recommended_Sensor:			data Base_Types::Integer;
			--
			Phase:						data Phase_Type;
			Destination:				data Base_Types::Integer;
			Landing_Options_Ready: 		data Base_Types::Boolean;
			Landing_Options:			data Landing_Options.impl;			
	end I2H.impl;
	
	-- NOTE: necessary to allow the formulation of some properties at team level
	data analysisAux
	end analysisAux;
	
	data implementation analysisAux.impl
		subcomponents
			sensor1Reliable: 	data Base_Types::Boolean;
			sensor2Reliable: 	data Base_Types::Boolean;
			sensor3Reliable: 	data Base_Types::Boolean;
			sensor1ErrorRange:	data SensorErrorRange;
			sensor2ErrorRange:	data SensorErrorRange;
			sensor3ErrorRange:	data SensorErrorRange;
	end analysisAux.impl;
		
	data Landing_Options		
	end Landing_Options;
	
	data implementation Landing_Options.impl
		subcomponents
			Option1: data Base_Types::Integer;
			Option2: data Base_Types::Integer;
			Option3: data Base_Types::Integer;
	end Landing_Options.impl;
	
	data Position
	end Position;
	
	data implementation Position.impl
		subcomponents
			X: data Base_Types::Float;
			Y: data Base_Types::Float;
			Z: data Base_Types::Float;							
	end Position.impl;

	data Sensor_Data
	end Sensor_Data;
	
	data implementation Sensor_Data.impl
		subcomponents
			Position: data Position.impl;
	end Sensor_Data.impl;
	
end Types_Constants;