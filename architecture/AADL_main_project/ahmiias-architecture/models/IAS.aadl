package IAS
public
	with Types_Constants;
	renames Types_Constants::all;
	with Unreliable_Sensor_Lib;	
	with Base_Types;
	with Faults;
	
	-------------------------------------
	-- IAS
	-------------------------------------
	system IAS
		features
			InputFromHuman : 		in data port H2I.impl;
			InputFromSensor1 : 		in data port Sensor_Data.impl;
			InputFromSensor2 : 		in data port Sensor_Data.impl;
			InputFromSensor3 : 		in data port Sensor_Data.impl;
			InputFromWOWSensor : 	in data port Base_Types::Boolean;
			Output : 				out data port I2H.impl;
		
		-- NOTE: no fault analysis at this level, due to missing IAS implementation 
		annex safety {**

			-- NOTE: the human operator currently handles false positives, not false negatives
			fault nondet_sensor1_unreliability "The IAS nondeterministically reports sensor 1 as reliable, when unreliable" : Faults::fail_sensor1_unreliability {
				eq nondet_val : bool;
				inputs: i2h_in <- Output, alt_val <- nondet_val; 
				outputs: Output <- i2h_out;    
				duration: permanent;
				disable: true;	
			}
		**};
		
		
		annex agree {**								
								
			-- QUESTION: is it possible to formulate properties about the likelihood of issuing an alert in range Level1 (resp.2) after an acceptance
			--			 or a rejection by the operator, without technical details about the learning algorithm?		
			guarantee ias_g1 "If the sensor error is in Normal range, then no alert is issued":
			 	(Output.sensor1ErrorData.errorRange = enum(Types_Constants::SensorErrorRange, Normal) 
			 		=> (not Output.sensor1ErrorData.unreliable))
		    and (Output.sensor2ErrorData.errorRange = enum(Types_Constants::SensorErrorRange, Normal) 
			 		=> (not Output.sensor2ErrorData.unreliable)) 
			and	(Output.sensor3ErrorData.errorRange = enum(Types_Constants::SensorErrorRange, Normal) 
			 		=> (not Output.sensor3ErrorData.unreliable));
			
			guarantee ias_g2 "If the sensor error is in Safety range, then an alert is issued":
			 	(Output.sensor1ErrorData.errorRange = enum(Types_Constants::SensorErrorRange, Safety) 
			 		=> Output.sensor1ErrorData.unreliable) 
			and (Output.sensor2ErrorData.errorRange = enum(Types_Constants::SensorErrorRange, Safety) 
			 		=> Output.sensor2ErrorData.unreliable)
			and (Output.sensor3ErrorData.errorRange = enum(Types_Constants::SensorErrorRange, Safety) 
			 		=> Output.sensor3ErrorData.unreliable);			
			
			-----------------------
			--UNRELIABLE SENSOR SCENARIO
			-----------------------

			eq previous_active_sensor : int = prev(Output.Active_Sensor, 1);
			
			eq previous_recommended_sensor : int = prev(Output.Recommended_Sensor, 1);

			eq previous_z_position : real = if (previous_active_sensor = 1) then 
												prev(InputFromSensor1.Position.Z, 0.0)
											else if (previous_active_sensor = 2) then
													prev(InputFromSensor2.Position.Z, 0.0)
												 else --(previous_active_sensor = 3)
												 	prev(InputFromSensor3.Position.Z, 0.0);
			
			eq Horizontal_Threshold : real = Unreliable_Sensor_Lib::HAL(previous_z_position);
			
			eq Vertical_Threshold : real = Unreliable_Sensor_Lib::VAL(previous_z_position);
							
			eq sensor1_reliable: bool, sensor2_reliable: bool, sensor3_reliable: bool = 
				Unreliable_Sensor_Lib::Sensor_Status(InputFromSensor1, InputFromSensor2, InputFromSensor3, Horizontal_Threshold, Vertical_Threshold);
				
			guarantee ias_g3 "Sensor status to operator":
					(Output.sensor1ErrorData.unreliable = not sensor1_reliable)
				and (Output.sensor2ErrorData.unreliable = not sensor2_reliable)
				and (Output.sensor3ErrorData.unreliable = not sensor3_reliable);			
			
			--Should we instead pick one of the three on some other criteria?
			guarantee ias_g4 "Recommended sensor is NIL if and only if all sensors are unreliable":
					(Output.Recommended_Sensor = NIL) <=> 
					(Output.sensor1ErrorData.unreliable and Output.sensor2ErrorData.unreliable and Output.sensor3ErrorData.unreliable);
			
			guarantee ias_g5 "The recommended sensor is a reliable sensor, unless it is NIL":
					not (Output.Recommended_Sensor = NIL) =>
						(
							   (Output.Recommended_Sensor = 1 and (not Output.sensor1ErrorData.unreliable))
							or (Output.Recommended_Sensor = 2 and (not Output.sensor2ErrorData.unreliable))
							or (Output.Recommended_Sensor = 3 and (not Output.sensor3ErrorData.unreliable))
						);
						
			guarantee ias_g6 "The recommended sensor is the active sensor unless the active sensor has become unreliable":			
					(		(previous_active_sensor = 1 and (not Output.sensor1ErrorData.unreliable))
						or 	(previous_active_sensor = 2 and (not Output.sensor2ErrorData.unreliable))
						or 	(previous_active_sensor = 3 and (not Output.sensor3ErrorData.unreliable))
					)
						=> (Output.Recommended_Sensor = previous_active_sensor);
 
			guarantee ias_g7 "The active sensor should stay the same unless the operator agrees that it is unreliable 
						and there is another reliable sensor available":
				Output.Active_Sensor = 	
					if (previous_recommended_sensor = NIL)
						then previous_active_sensor
					else if ((    previous_active_sensor = 1 and InputFromHuman.sensor1UnreliableResponse = enum(Response, Agree))
							  or (previous_active_sensor = 2 and InputFromHuman.sensor2UnreliableResponse = enum(Response, Agree))
							  or (previous_active_sensor = 3 and InputFromHuman.sensor3UnreliableResponse = enum(Response, Agree)))
						then previous_recommended_sensor
					else previous_active_sensor;				
			
			-- NOTE: added as refinement of g7 in presence of fault no_sensor1_unreliability_response (see Human.aadl) consisting in 
			--		 a missing operator response to an unreliable sensor message
--			guarantee ias_g8 "The active sensor should stay the same unless (i) it is unreliable, (ii) the operator agrees or does not respond after one step
--						and (iii) there is another reliable sensor available":
--				Output.Active_Sensor = 	
--					if (previous_recommended_sensor = NIL)
--						then previous_active_sensor
--					else if (	 (previous_active_sensor = 1 and (InputFromHuman.sensor1UnreliableResponse = enum(Response, Agree)
--															      or (prev(not sensor1_reliable, false) and InputFromHuman.sensor1UnreliableResponse = enum(Response, Neutral))))
--							  or (previous_active_sensor = 2 and (InputFromHuman.sensor2UnreliableResponse = enum(Response, Agree)
--							  									  or (prev(not sensor2_reliable, false) and InputFromHuman.sensor2UnreliableResponse = enum(Response, Neutral))))
--							  or (previous_active_sensor = 3 and (InputFromHuman.sensor2UnreliableResponse = enum(Response, Agree)
--							  									  or (prev(not sensor3_reliable, false) and InputFromHuman.sensor3UnreliableResponse = enum(Response, Neutral))))
--							  	)
--						then previous_recommended_sensor
--					else previous_active_sensor;


			-----------------------
			--FLIGHT PHASE STATE MACHINE
			-----------------------

			-------------------------------------------------------------
			--State machine support macros
									
			eq previous_phase : Phase_Type = prev(Output.Phase, enum(Phase_Type, On_Ground));

			eq some_transition: bool = 	   T_Ground_to_Flight
										or T_Flight_to_Landing
										or T_Landing_to_Ground
										or T_Landing_to_Flight
										or T_Flight_to_Ground;
			-------------------------------------------------------------
			--State transition macros
			
			eq T_Ground_to_Flight: bool = 
				false -> ((previous_phase = enum(Phase_Type, On_Ground)) and not InputFromWOWSensor);
				
			eq T_Flight_to_Landing: bool =
				(previous_phase = enum(Phase_Type, In_Flight)) and InputFromHuman.Initiate_Landing;
			
			--This is not desirable. The pilot should initiate all landings before they occur, but it does seem to be a possible transition.	
			eq T_Flight_to_Ground: bool =
				(previous_phase = enum(Phase_Type, In_Flight)) and InputFromWOWSensor;
				
			eq T_Landing_to_Flight: bool =
				(previous_phase = enum(Phase_Type, Landing)) and InputFromHuman.Abort_Landing;
			
			eq T_Landing_to_Ground: bool =
				(previous_phase = enum(Phase_Type, Landing)) and InputFromWOWSensor;
				
			-------------------------------------------------------------	
			--State machine guarantees	
			
			--This guarantee specifies the initial state.
       		guarantee ias_g9 "Initial_State": (Output.Phase = enum(Phase_Type, On_Ground)) -> true;
        
	        --This guarantee captures all the "self loops" in shorthand form. 
	        -- It is important to state what happens when no transition condition is satisfied.
	        -- Otherwise the model checker will allow "spontaneous" transitions.
	        guarantee ias_g10 "Self loops": not some_transition => (Output.Phase = previous_phase);
        
        	-- Now we write one guarantee for each transition.
         
	        guarantee ias_g11 "T_Ground_to_Flight_effect" : 	T_Ground_to_Flight 	=> (Output.Phase = enum(Phase_Type, In_Flight));
	     
	     	guarantee ias_g12 "T_Flight_to_Landing_effect" : 	T_Flight_to_Landing => (Output.Phase = enum(Phase_Type, Landing));  
	     	
	     	guarantee ias_g13 "T_Flight_to_Ground_effect" : 	T_Flight_to_Ground	=> (Output.Phase = enum(Phase_Type, On_Ground));
	     	
	     	guarantee ias_g14 "T_Landing_to_Flight_effect" :	T_Landing_to_Flight => (Output.Phase = enum(Phase_Type, In_Flight));
	     	
	     	guarantee ias_g15 "T_Landing_to_Ground_effect" : 	T_Landing_to_Ground => (Output.Phase = enum(Phase_Type, On_Ground));
	     	
	     	-----------------------
			--ABORTED LANDING SCENARIO
			-----------------------
			
			guarantee ias_g16 "Landing options should be distinct":
					not (Output.Landing_Options.Option1 = Output.Landing_Options.Option2)
				and not (Output.Landing_Options.Option1 = Output.Landing_Options.Option3)		 								
				and not (Output.Landing_Options.Option2 = Output.Landing_Options.Option3);
				
			guarantee ias_g17 "Present landing options if and only if the landing is aborted":
				T_Landing_to_Flight = Output.Landing_Options_Ready;
				
			guarantee ias_g18 "Destination changes if and only if the pilot selects a landing option":
				true -> (Output.Destination = if pre(Output.Landing_Options_Ready) then 
												InputFromHuman.Landing_Option_Selection 
											  else 
											  	pre(Output.Destination)
				); 
		**};

	end IAS;
	
end IAS;