package Human
public
	with Types_Constants;
	renames Types_Constants::all;
	with Base_Types;
	with Faults;
	
	-------------------------------------
	-- Human
	-------------------------------------
	
	system Human
		features
			InputFromIAS : 			in data port I2H.impl;
			InputFromSensor1 : 		in data port Sensor_Data.impl;
			InputFromSensor2 : 		in data port Sensor_Data.impl;
			InputFromSensor3 : 		in data port Sensor_Data.impl;
			InputFromWOWSensor : 	in data port Base_Types::Boolean;
			Output : 				out data port H2I.impl;
		
		-- NOTE: no fault analysis at this level, due to missing Human implementation
		annex safety {**		
			
			fault no_active_sensor_unreliability_response 
			"The operator does not communicate a response to an active sensor unreliability alert" : 
				Faults::fail_active_sensor_unreliability_response {
				inputs: h2i_in <- Output; 
				outputs: Output <- h2i_out;    
				duration: permanent;
				disable: true;	
			}
		**};
		
		
		annex agree {**
				
			-----------------------
			--GUARANTEES RELATED TO THE UNRELIABLE SENSOR SCENARIO
			-----------------------
			eq previouslyActiveSensorReliable	: bool = prev(InputFromIAS.activeSensorErrorData.reliable, true);
			
			-- NOTE: arbitrary delays between alert reception and response to be tested
			-- NOTE: at least one step to avoid the presence of an algebraic loop in the communication between IAS and operator
			guarantee h_g1 "If an active sensor unreliability alert is received by the operator, 
						  then a response is communicated by the operator at the next step":
				(not previouslyActiveSensorReliable)
				<=> 
				(   (Output.activeSensorUnreliableResponse = enum(Types_Constants::Response, Agree))
				 or (Output.activeSensorUnreliableResponse = enum(Types_Constants::Response, Disagree)));
					 
			guarantee h_g2 "If no active sensor unreliability alert is received by the operator, 
						  then no response is communicated by the operator at the next step":
				previouslyActiveSensorReliable
				<=> 
				Output.activeSensorUnreliableResponse = enum(Types_Constants::Response, Neutral);
							

			-----------------------
			--GUARANTEES RELATED TO THE ABORTED LANDING SCENARIO
			-----------------------
			
			guarantee h_g10 "Command initiate landing only if aircraft is in the flight phase (may be enforced by display)":
				Output.Initiate_Landing => prev((InputFromIAS.Phase = enum(Phase_Type, In_Flight)), false);
			
			guarantee h_g11 "Command abort landing only if aircraft is in the landing phase (may be enforced by display)":
				Output.Abort_Landing => prev((InputFromIAS.Phase = enum(Phase_Type, Landing)), false); 
				
			guarantee h_g12 "Choose a landing option when they are ready":
				true -> (pre(InputFromIAS.Landing_Options_Ready) 
						=> 
						(   (Output.Landing_Option_Selection = pre(InputFromIAS.Landing_Options.Option1))
					     or (Output.Landing_Option_Selection = pre(InputFromIAS.Landing_Options.Option2))
					     or (Output.Landing_Option_Selection = pre(InputFromIAS.Landing_Options.Option3)))); 						
		**};
		
	end Human;
	
end Human;