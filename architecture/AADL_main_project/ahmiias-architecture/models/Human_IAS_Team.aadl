package Human_IAS_Team
public
	with Human;
	renames Human::all;
	with IAS;
	renames IAS::all;
	with Types_Constants;
	renames Types_Constants::all;
	with Sensors;
	renames Sensors::all;
	
	-------------------------------------
	-- Human-Machine Team
	-------------------------------------
	
	system Team
		annex agree {**
			guarantee t_g "Placeholder guarantee to get AGREE to run": true;
		**};
	end Team;

	system implementation Team.impl
		subcomponents
			Human: system Human;
			IAS: system IAS;
			Sensor1: system Sensor1;
			Sensor2: system Sensor2;
			Sensor3: system Sensor3;
			WOW_Sensor: system WOW_Sensor;
		connections
			Top_impl_new_connection: feature IAS.Output -> Human.InputFromIAS;
			Top_impl_new_connection2: feature Sensor1.Output -> IAS.InputFromSensor1;
			Top_impl_new_connection3: feature Sensor2.Output -> IAS.InputFromSensor2;
			Top_impl_new_connection4: feature Sensor3.Output -> IAS.InputFromSensor3;
			Top_impl_new_connection5: feature Human.Output -> IAS.InputFromHuman;
			Top_impl_new_connection6: feature Sensor1.Output -> Human.InputFromSensor1;
			Top_impl_new_connection7: feature Sensor2.Output -> Human.InputFromSensor2;
			Top_impl_new_connection8: feature Sensor3.Output -> Human.InputFromSensor3;
			Top_impl_new_connection9: feature WOW_Sensor.Output -> IAS.InputFromWOWSensor;
			Top_impl_new_connection10: feature WOW_Sensor.Output -> Human.InputFromWOWSensor;
			

		annex safety {**
			analyze : max 1 fault
		**};
		
		annex agree {**
							 		
			--------------------------------------------
			-- EQ (STATE VARIABLES)
			--------------------------------------------
			eq reliableSensorAvailable		: bool = (	 IAS.Aux.sensor1Reliable
													  or IAS.Aux.sensor2Reliable
													  or IAS.Aux.sensor3Reliable);
			eq previousActiveSensor 				: int = prev(IAS.Output.Active_Sensor, 1);
			eq previouslyRecommendedSensor 			: int = prev(IAS.Output.Recommended_Sensor, 1);
			eq previouslyActiveSensorReliable		: bool = prev(IAS.Output.activeSensorErrorData.reliable, true);
			eq previouslyReliableSensorAvailable	: bool = prev(reliableSensorAvailable, true);
			eq previouslyActiveSensorErrorRange	: SensorErrorRange = prev(IAS.Output.activeSensorErrorData.errorRange,
																	      enum(SensorErrorRange, Normal));
			eq sensor1Level1Or2Range : bool = 	 (IAS.Aux.sensor1ErrorRange = enum(Types_Constants::SensorErrorRange, Level1))
											  or (IAS.Aux.sensor1ErrorRange = enum(Types_Constants::SensorErrorRange, Level2));
			eq sensor2Level1Or2Range : bool = 	 (IAS.Aux.sensor2ErrorRange = enum(Types_Constants::SensorErrorRange, Level1))
											  or (IAS.Aux.sensor2ErrorRange = enum(Types_Constants::SensorErrorRange, Level2));
			eq sensor3Level1Or2Range : bool = 	 (IAS.Aux.sensor3ErrorRange = enum(Types_Constants::SensorErrorRange, Level1))
											  or (IAS.Aux.sensor3ErrorRange = enum(Types_Constants::SensorErrorRange, Level2));
			eq previouslySensor1Level1Or2Range : bool = prev(sensor1Level1Or2Range, false);
			eq previouslySensor2Level1Or2Range : bool = prev(sensor2Level1Or2Range, false);
			eq previouslySensor3Level1Or2Range : bool = prev(sensor3Level1Or2Range, false);
			
			 -- NOTE: observers for the generation of counter-example traces of interest in the operator-IAS interaction
			 lemma t_l01 "Observer: an active sensor unreliability alert is communicated by the IAS to the operator and 
					   an agreement response is communicated by the operator at the next step":
				not( 	 (not previouslyActiveSensorReliable) 
					 and (Human.Output.activeSensorUnreliableResponse = enum(Response, Agree)));	
				     
 			 lemma t_l02 "Observer: an active sensor unreliability alert is communicated by the IAS to the operator and 
             		   a disagreement response is communicated by the operator at the next step":
				not( 	 (not previouslyActiveSensorReliable) 
					 and (Human.Output.activeSensorUnreliableResponse = enum(Response, Disagree)));	 
				     
			 lemma t_l03 "Observer: no active sensor unreliability alert is communicated by the IAS to the operator and 
              		   no response is communicated by the operator at the next step":
				not( 	  previouslyActiveSensorReliable 
					 and (Human.Output.activeSensorUnreliableResponse = enum(Response, Neutral)));
			
			-- NOTE: observers for the generation of counter-example traces of interest in the IAS
			 lemma t_l04 "Observer: the active sensor error is in Level1 range and an unreliability alert is issued":
			 	(IAS.Output.activeSensorErrorData.errorRange = enum(SensorErrorRange, Level1)) 
			 	=> 
			 	IAS.Output.activeSensorErrorData.reliable;
			 lemma t_l05 "Observer: the active sensor error is in Level1 range and an unreliability alert is not issued":
			 	(IAS.Output.activeSensorErrorData.errorRange = enum(SensorErrorRange, Level1)) 
			 	=> 
			 	(not IAS.Output.activeSensorErrorData.reliable);
			 lemma t_l06 "Observer: the active sensor error is in Level2 range and an unreliability alert is issued":
			 	(IAS.Output.activeSensorErrorData.errorRange = enum(SensorErrorRange, Level2)) 
			 	=> 
			 	IAS.Output.activeSensorErrorData.reliable;
			 lemma t_l07 "Observer: the active sensor error is in Level2 range and an unreliability alert is not issued":
			 	(IAS.Output.activeSensorErrorData.errorRange = enum(SensorErrorRange, Level2))
			 	=> 
			 	(not IAS.Output.activeSensorErrorData.reliable);
			 		 		 		 				
			 -- NOTE: a sensor error can arbitrarily fluctuate between Normal and Safety ranges in consecutive steps	
			 lemma t_l18 "Observer: the active sensor error range can move from Normal to Safety to Normal in consecutive steps":
				not( 	 prev(prev(IAS.Output.activeSensorErrorData.errorRange = enum(SensorErrorRange, Normal), false), false)
					 and prev(IAS.Output.activeSensorErrorData.errorRange = enum(SensorErrorRange, Safety), false)
					 and IAS.Output.activeSensorErrorData.errorRange = enum(SensorErrorRange, Normal) );

			--------------------------------------------
			-- OBSERVERS (We want these to be invalid.)
			--------------------------------------------
			lemma t_l21 "Observer: Operator agrees that the active sensor is unreliable":
				not (Human.Output.activeSensorUnreliableResponse = enum(Response, Agree));													
			lemma t_l22 "Observer: IAS evaluates active sensor as unreliable": 
				IAS.Output.activeSensorErrorData.reliable;
													
			-- NOTE: multiple sensors can be arbitrarily erroneous at the same step
			lemma t_l23 "Observer: All sensors reliable": 
				not (	 IAS.Aux.sensor1Reliable
					 and IAS.Aux.sensor2Reliable
					 and IAS.Aux.sensor3Reliable);
			lemma t_l24 "Observer: All sensors unreliable": 
				reliableSensorAvailable;
			lemma t_l25 "Observer: The active sensor changes": 
				IAS.Output.Active_Sensor = prev(IAS.Output.Active_Sensor,1);
													
			--Check that all states are reachable
			lemma t_l26 "Observer: On_Ground reachable" : 
				not (IAS.Output.Phase = enum(Phase_type, On_Ground));
			lemma t_l27 "Observer: In_Flight reachable" : 
				not (IAS.Output.Phase = enum(Phase_type, In_Flight));
			lemma t_l28 "Observer: Landing reachable" : 
				not (IAS.Output.Phase = enum(Phase_type, Landing));
			
			--Check that all state transitions are reachable
			lemma t_l29 "Observer: T_Ground_to_Flight is reachable" : 
				not IAS.T_Ground_to_Flight;
			lemma t_l30 "Observer: T_Flight_to_Landing is reachable" : 
				not IAS.T_Flight_to_Landing;
			lemma t_l31 "Observer: T_Landing_to_Ground is reachable" : 
				not IAS.T_Landing_to_Ground;
			lemma t_l32 "Observer: T_Landing_to_Flight is reachable" : 
				not IAS.T_Landing_to_Flight;
			lemma t_l33 "Observer: T_Flight_to_Ground is reachable" : 
				not IAS.T_Flight_to_Ground;
			
			lemma t_l34 "Observer: Destination changes" : 
				true -> (IAS.Output.Destination = pre(IAS.Output.Destination)); 
			
			------------------------------------------------------------------------------
			-- LEMMAS (These should be true based on the guarantees of the subcomponents.)
			------------------------------------------------------------------------------
			
			 lemma t_l20 "If the active sensor error is in Normal range, then no active sensor unreliability alert is issued":
			 	(IAS.Output.activeSensorErrorData.errorRange = enum(SensorErrorRange, Normal)) 
			 	=> 
			 	IAS.Output.activeSensorErrorData.reliable;
			 		
			lemma t_l35 "Operator responds to sensor unreliability alerts": 
				(not previouslyActiveSensorReliable) 
				<=> 
				(	(Human.Output.activeSensorUnreliableResponse = enum(Response, Agree))
				 or (Human.Output.activeSensorUnreliableResponse = enum(Response, Disagree)));
						 			
			lemma t_l39 "Unless the active sensor becomes unreliable, 
					the recommended sensor is the current active sensor":
				(   (previousActiveSensor = 1) and IAS.Aux.sensor1Reliable
				 or (previousActiveSensor = 2) and IAS.Aux.sensor2Reliable
				 or (previousActiveSensor = 3) and IAS.Aux.sensor3Reliable)
				=> 
				(IAS.Output.Recommended_Sensor = previousActiveSensor);
			
			lemma t_l40 "If the operator agrees that the active sensor is unreliable, 
					the new active sensor is the previously recommended sensor, 
					unless the previously recommended sensor was NIL":
				(previouslyRecommendedSensor != NIL) 
				=>
				((Human.Output.activeSensorUnreliableResponse = enum(Response, Agree))  
				 => 
				 (IAS.Output.Active_Sensor = previouslyRecommendedSensor));
						
			lemma t_l41 "If the operator disagrees that the active sensor is unreliable, then the active sensor should not change.":
				(Human.Output.activeSensorUnreliableResponse = enum(Response, Disagree))
				=>  
				(IAS.Output.Active_Sensor = previousActiveSensor);
			
			---------------------------------------------------------
			-- NOTE: 
			-- 1) t_l42 is the original formulation. It becomes invalid when fault no_active_sensor_unreliability_response (see Human.aadl) 
			--	  is enabled, but its validity is restored when IAS guarantee ias_g7 is refined into ias_g8 (see IAS.aadl) 
			-- 2) t_l42 becomes invalid again, in presence of the fault, when IAS guarantee ias_g8 is refined into ias_g20: 
			--    in fact, an unreliable sensor can remain active also if the sensor error is in Level 1 or 2 range and the operator 
			--	  does not respond to the unreliability alert. 
			--    t_l43 is introduced as a refinement of t_l42; t_l43 is valid in combination with ias_g20 
			
			lemma t_l42 "If an unreliable sensor is the active sensor, it must be the case that either 
					the pilot disagreed with the IAS assessment 
					or the sensor just became unreliable on this timestep 
					or there was no reliable sensor available on the previous timestep":
						(((IAS.Output.Active_Sensor = 1) and (not IAS.Output.activeSensorErrorData.reliable)) 
						=>  
						(	(Human.Output.activeSensorUnreliableResponse = enum(Response, Disagree))
						 or prev(IAS.Aux.sensor1Reliable, true) 
						 or (not previouslyReliableSensorAvailable)))
					and (((IAS.Output.Active_Sensor = 2) and (not IAS.Output.activeSensorErrorData.reliable)) 
						=>  
						(	(Human.Output.activeSensorUnreliableResponse = enum(Response, Disagree))
						 or  prev(IAS.Aux.sensor2Reliable, true) 
						 or (not previouslyReliableSensorAvailable)))
					and (((IAS.Output.Active_Sensor = 3) and (not IAS.Output.activeSensorErrorData.reliable)) 
						 =>  
						(	(Human.Output.activeSensorUnreliableResponse = enum(Response, Disagree))
						 or prev(IAS.Aux.sensor3Reliable, true) 
						 or (not previouslyReliableSensorAvailable)));
							
			lemma t_l43 "If an unreliable sensor is the active sensor, it must be the case that either 
					the pilot disagreed with the IAS assessment 
					or the pilot did not respond
					or the sensor just became unreliable on this timestep 
					or there was no reliable sensor available on the previous timestep":
						(((IAS.Output.Active_Sensor = 1) and (not IAS.Output.activeSensorErrorData.reliable)) 
							=>  (	(Human.Output.activeSensorUnreliableResponse = enum(Response, Disagree))
								or  ( 	  (Human.Output.activeSensorUnreliableResponse = enum(Response, Neutral)) 
									  and previouslySensor1Level1Or2Range)
								or 	prev(IAS.Aux.sensor1Reliable, true) 
								or  (not previouslyReliableSensorAvailable)
								))
					and (((IAS.Output.Active_Sensor = 2) and (not IAS.Output.activeSensorErrorData.reliable)) 
							=>  (	(Human.Output.activeSensorUnreliableResponse = enum(Response, Disagree)) 
								or  ( 	  (Human.Output.activeSensorUnreliableResponse = enum(Response, Neutral)) 
									  and previouslySensor2Level1Or2Range)
								or 	prev(IAS.Aux.sensor2Reliable, true)
								or 	(not previouslyReliableSensorAvailable)
								))
					and (((IAS.Output.Active_Sensor = 3) and (not IAS.Output.activeSensorErrorData.reliable))
							=>  (	(Human.Output.activeSensorUnreliableResponse = enum(Response, Disagree))
								or  ( 	  (Human.Output.activeSensorUnreliableResponse = enum(Response, Neutral)) 
									  and previouslySensor3Level1Or2Range)
								or 	prev(IAS.Aux.sensor3Reliable, true) 
								or  (not previouslyReliableSensorAvailable)));
			
			lemma t_l48 "Sensor errors are always non-negative" :
				IAS.Output.activeSensorErrorData.error >= 0.0;				
			---------------------------------------------------------

			lemma t_l44 "Active sensor in range":
				(IAS.Output.Active_Sensor >= 1) and (IAS.Output.Active_Sensor <= 3);
			
			lemma t_l45 "Recommended active sensor in range":
				(IAS.Output.Recommended_Sensor >= 0) and (IAS.Output.Recommended_Sensor <= 3);
														
			lemma t_l46 "Only stated transitions are allowed." :
				IAS.some_transition or (IAS.Output.Phase = IAS.previous_phase);
				
			------------------------------------------------------------------------------
			-- INVALID LEMMAS (These are notably invalid.)
			------------------------------------------------------------------------------
			
			lemma t_l47 "Invalid (because the operator may disagree): The active sensor is always a reliable sensor (on the previous timestep) 
						 when a reliable sensor is available":
				true -> (pre(previouslyActiveSensorReliable)
						=>
						(	((IAS.Output.Active_Sensor = 1) => pre(IAS.Aux.sensor1Reliable))
						and ((IAS.Output.Active_Sensor = 2) => pre(IAS.Aux.sensor1Reliable))
						and ((IAS.Output.Active_Sensor = 3) => pre(IAS.Aux.sensor2Reliable))));
						
			lemma t_l49 "Invalid (due to asynchrony in IAS-operator communication): If the active sensor is reliable, then the active sensor is not changed to an unreliable sensor":
				(previousActiveSensor = 1 and IAS.Aux.sensor1Reliable)
				=>
				(not (		((IAS.Output.Active_Sensor = 2) and (not IAS.Aux.sensor2Reliable))
						or	((IAS.Output.Active_Sensor = 3) and (not IAS.Aux.sensor3Reliable))));
		**};
		
	end Team.impl;
		
end Human_IAS_Team;
