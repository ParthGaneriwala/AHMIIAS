MODULE main

VAR state_superstate : {nil};
VAR state_operator_name : {initialize1,nil,takeoff,transition,sensor-error-over-limit,start-landing,landing-phase-two,landing-phase-three,landing-phase-four,landing-finished,abort-landing,transition-after-abort};
VAR state_name : {takeoff,nil,flying};
VAR state_flight-mode : {vertical,nil,horizontal};
VAR state_io_throttle : real;
VAR state_io_altitude : integer;
VAR state_io_airspeed : integer;
VAR state_sensor-unreliable : {no,nil,yes};
VAR state_io_sensor-error : real;
VAR state_io_initiate-landing : {yes,nil};
VAR state_landing : {no,nil,phase-one,phase-two,phase-three,phase-four,abort,landed};
VAR state_io_distance-to-target : real;
VAR state_io_abort-landing : {yes,nil};
VAR state_io_target-altitude : integer;
VAR state_io_autoflaps : {off,nil,on};
VAR state_io_air-brake : integer;
VAR state_io_VTOLMode : {horizontal,nil,vertical};
VAR state_io_GPSUnreliable : {yes,nil};
VAR state_io_target-speed : integer;


ASSIGN
    init (state_operator_name) := nil;
    init (state_name) := nil;
    init (state_flight-mode) := nil;
    init (state_io_throttle) := 0.0;
    init (state_io_altitude) := 0;
    init (state_io_airspeed) := 0;
    init (state_sensor-unreliable) := nil;
    init (state_io_sensor-error) := 0.0;
    init (state_io_initiate-landing) := nil;
    init (state_landing) := nil;
    init (state_io_distance-to-target) := 0.0;
    init (state_io_abort-landing) := nil;
    init (state_io_target-altitude) := 0;
    init (state_io_autoflaps) := nil;
    init (state_io_air-brake) := 0;
    init (state_io_VTOLMode) := nil;
    init (state_io_GPSUnreliable) := nil;
    init (state_io_target-speed) := 0;

VAR soarAgent : soarRules(state_superstate, state_operator_name, state_name, state_flight-mode, state_io_throttle, state_io_altitude, state_io_airspeed, state_sensor-unreliable, state_io_sensor-error, state_io_initiate-landing, state_landing, state_io_distance-to-target, state_io_abort-landing, state_io_target-altitude, state_io_autoflaps, state_io_air-brake, state_io_VTOLMode, state_io_GPSUnreliable, state_io_target-speed);


MODULE soarRules(state_superstate, state_operator_name, state_name, state_flight-mode, state_io_throttle, state_io_altitude, state_io_airspeed, state_sensor-unreliable, state_io_sensor-error, state_io_initiate-landing, state_landing, state_io_distance-to-target, state_io_abort-landing, state_io_target-altitude, state_io_autoflaps, state_io_air-brake, state_io_VTOLMode, state_io_GPSUnreliable, state_io_target-speed)

VAR state:{start, run};
ASSIGN
        init (state) := start;
        next (state) := 
            case
        --propose*initialize (state_superstate)
        state = start & (state_superstate=nil) : run;
        --apply*initialize (state_operator_name)
        state = start & (state_operator_name=initialize1) : run;
        --propose*takeoff (state_name, state_flight-mode, state_io_throttle)
        state = start & (state_name=takeoff & state_flight-mode=vertical & state_io_throttle<0.9) : run;
        --apply*takeoff (state_operator_name)
        state = start & (state_operator_name=takeoff) : run;
        --propose*transition (state_name, state_flight-mode, state_io_throttle, state_io_altitude, state_io_airspeed)
        state = start & (state_name=takeoff & state_flight-mode=vertical & state_io_throttle>0.9 & state_io_altitude>3200 & state_io_airspeed>=0) : run;
        --apply*transition (state_operator_name, state_name)
        state = start & (state_operator_name=transition & state_name=takeoff) : run;
        --propose*detect*error (state_flight-mode, state_sensor-unreliable, state_io_sensor-error)
        state = start & (state_flight-mode=horizontal & state_sensor-unreliable=no & state_io_sensor-error>10.0) : run;
        --apply*detect*error (state_operator_name)
        state = start & (state_operator_name=sensor-error-over-limit) : run;
        --propose*start-landing (state_flight-mode, state_io_initiate-landing, state_landing)
        state = start & (state_flight-mode=horizontal & state_io_initiate-landing=yes & state_landing=no) : run;
        --apply*start-landing (state_landing, state_operator_name)
        state = start & (state_landing=no & state_operator_name=start-landing) : run;
        --propose*landing-phase-two (state_flight-mode, state_landing, state_io_altitude)
        state = start & (state_flight-mode=horizontal & state_landing=phase-one & state_io_altitude<=4000) : run;
        --apply*landing-phase-two (state_operator_name)
        state = start & (state_operator_name=landing-phase-two) : run;
        --propose*landing-phase-three (state_flight-mode, state_landing, state_io_altitude, state_io_airspeed)
        state = start & (state_flight-mode=horizontal & state_landing=phase-two & state_io_altitude<=4050 & state_io_airspeed<=180) : run;
        --apply*landing-phase-three (state_operator_name)
        state = start & (state_operator_name=landing-phase-three) : run;
        --propose*landing-phase-four (state_flight-mode, state_landing, state_io_altitude, state_io_distance-to-target)
        state = start & (state_flight-mode=horizontal & state_landing=phase-three & state_io_altitude<3700 & state_io_distance-to-target<1.0) : run;
        --apply*landing-phase-four (state_operator_name)
        state = start & (state_operator_name=landing-phase-four) : run;
        --propose*landing-finished (state_flight-mode, state_landing, state_io_airspeed)
        state = start & (state_flight-mode=horizontal & state_landing=phase-four & state_io_airspeed<=10) : run;
        --apply*landing-finished (state_operator_name)
        state = start & (state_operator_name=landing-finished) : run;
        --propose*abort-landing (state_io_abort-landing)
        state = start & (state_io_abort-landing=yes) : run;
        --apply*abort-landing (state_operator_name)
        state = start & (state_operator_name=abort-landing) : run;
        --propose*transition*after*abort (state_landing, state_flight-mode, state_io_altitude)
        state = start & (state_landing=abort & state_flight-mode=vertical & state_io_altitude>4200) : run;
        --apply*transition*after*abort (state_operator_name)
        state = start & (state_operator_name=transition-after-abort) : run;
        state = run : start;
            TRUE : state;
            esac;
TRANS
        next (state_operator_name) =
            case
        --propose*initialize (state_superstate)
        (state = run & state_superstate=nil): initialize1;
        --propose*takeoff (state_name, state_flight-mode, state_io_throttle)
        (state = run & state_name=takeoff & state_flight-mode=vertical & state_io_throttle<0.9): takeoff;
        --propose*transition (state_name, state_flight-mode, state_io_throttle, state_io_altitude, state_io_airspeed)
        (state = run & state_name=takeoff & state_flight-mode=vertical & state_io_throttle>0.9 & state_io_altitude>3200 & state_io_airspeed>=0): transition;
        --propose*detect*error (state_flight-mode, state_sensor-unreliable, state_io_sensor-error)
        (state = run & state_flight-mode=horizontal & state_sensor-unreliable=no & state_io_sensor-error>10.0): sensor-error-over-limit;
        --propose*start-landing (state_flight-mode, state_io_initiate-landing, state_landing)
        (state = run & state_flight-mode=horizontal & state_io_initiate-landing=yes & state_landing=no): start-landing;
        --propose*landing-phase-two (state_flight-mode, state_landing, state_io_altitude)
        (state = run & state_flight-mode=horizontal & state_landing=phase-one & state_io_altitude<=4000): landing-phase-two;
        --propose*landing-phase-three (state_flight-mode, state_landing, state_io_altitude, state_io_airspeed)
        (state = run & state_flight-mode=horizontal & state_landing=phase-two & state_io_altitude<=4050 & state_io_airspeed<=180): landing-phase-three;
        --propose*landing-phase-four (state_flight-mode, state_landing, state_io_altitude, state_io_distance-to-target)
        (state = run & state_flight-mode=horizontal & state_landing=phase-three & state_io_altitude<3700 & state_io_distance-to-target<1.0): landing-phase-four;
        --propose*landing-finished (state_flight-mode, state_landing, state_io_airspeed)
        (state = run & state_flight-mode=horizontal & state_landing=phase-four & state_io_airspeed<=10): landing-finished;
        --propose*abort-landing (state_io_abort-landing)
        (state = run & state_io_abort-landing=yes): abort-landing;
        --propose*transition*after*abort (state_landing, state_flight-mode, state_io_altitude)
        (state = run & state_landing=abort & state_flight-mode=vertical & state_io_altitude>4200): transition-after-abort;
            TRUE : state_operator_name;
            esac;


TRANS
        next (state_name) =
            case
        --apply*initialize (state_operator_name)
        (state = run & state_operator_name=initialize1): takeoff;
        --apply*transition (state_operator_name, state_name)
        (state = run & state_operator_name=transition & state_name=takeoff): flying;
            TRUE : state_name;
            esac;


TRANS
        next (state_flight-mode) =
            case
        --apply*initialize (state_operator_name)
        (state = run & state_operator_name=initialize1): vertical;
        --apply*transition (state_operator_name, state_name)
        (state = run & state_operator_name=transition & state_name=takeoff): horizontal;
        --apply*abort-landing (state_operator_name)
        (state = run & state_operator_name=abort-landing): vertical;
        --apply*transition*after*abort (state_operator_name)
        (state = run & state_operator_name=transition-after-abort): horizontal;
            TRUE : state_flight-mode;
            esac;


TRANS
        next (state_io_throttle) =
            case
        --apply*initialize (state_operator_name)
        (state = run & state_operator_name=initialize1): 0;
        --apply*takeoff (state_operator_name)
        (state = run & state_operator_name=takeoff): state_io_throttle+0.1;
        --apply*start-landing (state_landing, state_operator_name)
        (state = run & state_landing=no & state_operator_name=start-landing): 0.0;
        --apply*landing-phase-two (state_operator_name)
        (state = run & state_operator_name=landing-phase-two): 0.0;
        --apply*landing-phase-three (state_operator_name)
        (state = run & state_operator_name=landing-phase-three): 0.31;
        --apply*landing-phase-four (state_operator_name)
        (state = run & state_operator_name=landing-phase-four): 0.195;
        --apply*landing-finished (state_operator_name)
        (state = run & state_operator_name=landing-finished): 0.23;
        --apply*abort-landing (state_operator_name)
        (state = run & state_operator_name=abort-landing): 0.9;
            TRUE : state_io_throttle;
            esac;


TRANS
        next (state_sensor-unreliable) =
            case
        --apply*initialize (state_operator_name)
        (state = run & state_operator_name=initialize1): no;
        --apply*detect*error (state_operator_name)
        (state = run & state_operator_name=sensor-error-over-limit): yes;
            TRUE : state_sensor-unreliable;
            esac;


TRANS
        next (state_landing) =
            case
        --apply*initialize (state_operator_name)
        (state = run & state_operator_name=initialize1): no;
        --apply*start-landing (state_landing, state_operator_name)
        (state = run & state_landing=no & state_operator_name=start-landing): phase-one;
        --apply*landing-phase-two (state_operator_name)
        (state = run & state_operator_name=landing-phase-two): phase-two;
        --apply*landing-phase-three (state_operator_name)
        (state = run & state_operator_name=landing-phase-three): phase-three;
        --apply*landing-phase-four (state_operator_name)
        (state = run & state_operator_name=landing-phase-four): phase-four;
        --apply*landing-finished (state_operator_name)
        (state = run & state_operator_name=landing-finished): landed;
        --apply*abort-landing (state_operator_name)
        (state = run & state_operator_name=abort-landing): abort;
        --apply*transition*after*abort (state_operator_name)
        (state = run & state_operator_name=transition-after-abort): no;
            TRUE : state_landing;
            esac;


TRANS
        next (state_io_target-altitude) =
            case
        --apply*initialize (state_operator_name)
        (state = run & state_operator_name=initialize1): 5000;
        --apply*start-landing (state_landing, state_operator_name)
        (state = run & state_landing=no & state_operator_name=start-landing): 4000;
        --apply*landing-phase-three (state_operator_name)
        (state = run & state_operator_name=landing-phase-three): 3700;
        --apply*landing-phase-four (state_operator_name)
        (state = run & state_operator_name=landing-phase-four): 2250;
        --apply*transition*after*abort (state_operator_name)
        (state = run & state_operator_name=transition-after-abort): 5000;
            TRUE : state_io_target-altitude;
            esac;


TRANS
        next (state_io_autoflaps) =
            case
        --apply*initialize (state_operator_name)
        (state = run & state_operator_name=initialize1): off;
        --apply*landing-phase-two (state_operator_name)
        (state = run & state_operator_name=landing-phase-two): on;
        --apply*abort-landing (state_operator_name)
        (state = run & state_operator_name=abort-landing): off;
            TRUE : state_io_autoflaps;
            esac;


TRANS
        next (state_io_air-brake) =
            case
        --apply*initialize (state_operator_name)
        (state = run & state_operator_name=initialize1): 0;
        --apply*start-landing (state_landing, state_operator_name)
        (state = run & state_landing=no & state_operator_name=start-landing): 0.8;
        --apply*landing-phase-two (state_operator_name)
        (state = run & state_operator_name=landing-phase-two): 1;
        --apply*abort-landing (state_operator_name)
        (state = run & state_operator_name=abort-landing): 0;
            TRUE : state_io_air-brake;
            esac;


TRANS
        next (state_io_VTOLMode) =
            case
        --apply*transition (state_operator_name, state_name)
        (state = run & state_operator_name=transition & state_name=takeoff): horizontal;
        --apply*landing-phase-three (state_operator_name)
        (state = run & state_operator_name=landing-phase-three): vertical;
        --apply*abort-landing (state_operator_name)
        (state = run & state_operator_name=abort-landing): vertical;
        --apply*transition*after*abort (state_operator_name)
        (state = run & state_operator_name=transition-after-abort): horizontal;
            TRUE : state_io_VTOLMode;
            esac;


TRANS
        next (state_io_GPSUnreliable) =
            case
        --apply*detect*error (state_operator_name)
        (state = run & state_operator_name=sensor-error-over-limit): yes;
            TRUE : state_io_GPSUnreliable;
            esac;


TRANS
        next (state_io_target-speed) =
            case
        --apply*landing-phase-four (state_operator_name)
        (state = run & state_operator_name=landing-phase-four): 0;
            TRUE : state_io_target-speed;
            esac;



