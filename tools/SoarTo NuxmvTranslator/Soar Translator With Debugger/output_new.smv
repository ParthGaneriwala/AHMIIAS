MODULE main

VAR state_flight-mode : {nil,horizontal};
VAR state_safety-error : real;
VAR state_error-info : {nil};
VAR state_error-info_error : {nil,gps,imu,lidar};
VAR state_error-info_current-value : real;
VAR state_error-info_warn-condition : {safety,nil,high,low,normal};
VAR state_high-low-warn-error : real;
VAR state_normal-error : real;
VAR state_superstate : {nil};
VAR state_warning-issued : {nil,gps,imu,lidar};
VAR state_error-info_value-changed : {nil,true};
VAR state_operator_name : {warn,do-not-warn,nil,record-changed-error,combined-warn-propose-do-not-warn-propose};
VAR state_operator_name_error-info : {nil};
VAR state_operator_error-info : {nil};
VAR state_operator_error-info_warn-condition : {nil,low};
VAR state_operator_error-info_error : {nil,lidar};
VAR state_io_alert-sensor-error : {nil,gps,imu,lidar};
VAR state_io_alert-sensor-error-value : {nil};
VAR state_error-info_old-value : real;
VAR state_error-info_warning-accepted : {nil};
VAR state_io_alert-sensor-error_alert-sensor-error-value : {nil};
VAR state_value : {nil};


ASSIGN
    init (state_flight-mode) := nil;
    init (state_safety-error) := 0.0;
    init (state_error-info_error) := nil;
    init (state_error-info_current-value) := 0.0;
    init (state_error-info_warn-condition) := nil;
    init (state_high-low-warn-error) := 0.0;
    init (state_normal-error) := 0.0;
    init (state_warning-issued) := nil;
    init (state_error-info_value-changed) := nil;
    init (state_operator_name) := nil;
    init (state_operator_error-info_warn-condition) := nil;
    init (state_operator_error-info_error) := nil;
    init (state_io_alert-sensor-error) := nil;
    init (state_error-info_old-value) := 0.0;


VAR soarAgent : soarRules(state_flight-mode,state_safety-error,state_error-info,state_error-info_error,state_error-info_current-value,state_error-info_warn-condition,state_high-low-warn-error,state_normal-error,state_superstate,state_warning-issued,state_error-info_value-changed,state_operator_name,state_operator_name_error-info,state_operator_error-info,state_operator_error-info_warn-condition,state_operator_error-info_error,state_io_alert-sensor-error,state_io_alert-sensor-error-value,state_error-info_old-value,state_error-info_warning-accepted,state_io_alert-sensor-error_alert-sensor-error-value,state_value);

MODULE soarRules(state_flight-mode,state_safety-error,state_error-info,state_error-info_error,state_error-info_current-value,state_error-info_warn-condition,state_high-low-warn-error,state_normal-error,state_superstate,state_warning-issued,state_error-info_value-changed,state_operator_name,state_operator_name_error-info,state_operator_error-info,state_operator_error-info_warn-condition,state_operator_error-info_error,state_io_alert-sensor-error,state_io_alert-sensor-error-value,state_error-info_old-value,state_error-info_warning-accepted,state_io_alert-sensor-error_alert-sensor-error-value,state_value)

VAR state:{start, run};
ASSIGN
        init (state) := start;
        next (state) :=
            case
        --do-not-warn*when-warning-issued*propose (state_error-info,state_warning-issued,state_error-info_value-changed,state_error-info_warn-condition)
        state = start & (state_warning-issued != nil & state_error-info_value-changed = true & state_error-info_warn-condition != nil) : run;
        --warn*best*safety-condition (state_operator_name,state_error-info_warn-condition)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = safety) : run;
        --do-not-warn*best*normal-condition (state_operator_name,state_error-info_warn-condition)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = normal) : run;
        --warn*select*low*gps (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = low & state_error-info_error = gps) : run;
        --warn*select*low*lidar (state_operator_name,state_operator_error-info,state_operator_error-info_warn-condition,state_operator_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_operator_error-info_warn-condition = low & state_operator_error-info_error = lidar) : run;
        --warn*select*low*imu (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = low & state_error-info_error = imu) : run;
        --warn*select*high*gps (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = gps) : run;
        --warn*select*high*lidar (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = lidar) : run;
        --warn*select*high*imu (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = imu) : run;
        --do-not-warn*select*low*gps (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = low & state_error-info_error = gps) : run;
        --do-not-warn*select*low*lidar (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = low & state_error-info_error = lidar) : run;
        --do-not-warn*select*low*imu (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = low & state_error-info_error = imu) : run;
        --do-not-warn*select*high*gps (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = gps) : run;
        --do-not-warn*select*high*lidar (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = lidar) : run;
        --do-not-warn*select*high*imu (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        state = start & (state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = imu) : run;
        --warn*apply*issue-warning (state_warning-issued,state_io_alert-sensor-error,state_io_alert-sensor-error-value,state_operator_name,state_error-info,state_error-info_error,state_error-info_old-value,state_error-info_value-changed,state_error-info_warning-accepted)
        state = start & (state_warning-issued = nil & state_operator_name = warn & state_error-info_value-changed = true & state_error-info_warning-accepted = nil) : run;
        --record-changed-error*propose (state_error-info,state_error-info_current-value,state_error-info_old-value,state_error-info_value-changed)
        state = start & (state_error-info_old-value != state_error-info_current-value & state_error-info_value-changed = nil) : run;
        --record-changed-error*apply*remove-old-value (state_operator_name,state_error-info,state_value,state_error-info_error,state_error-info_old-value,state_error-info_value-changed)
        state = start & (state_operator_name = record-changed-error & state_error-info_value-changed = nil) : run;
        --record-changed-error*apply*new-old-value (state_operator_name,state_error-info,state_value,state_error-info_error,state_error-info_old-value,state_error-info_value-changed)
        state = start & (state_operator_name = record-changed-error & state_error-info_old-value < 0.0 & state_error-info_value-changed = nil) : run;
        --combined-warn-propose-do-not-warn-propose (state_error-info,state_warning-issued,state_error-info_value-changed,state_error-info_warn-condition)
        state = start & (state_warning-issued = nil & state_error-info_value-changed = true & state_error-info_warn-condition != nil) : run;
        state = run : start;
            TRUE : state;
            esac;
TRANS
        next (state_operator_name) =
            case

        -- 10000.0        --do-not-warn*best*normal-condition (state_operator_name,state_error-info_warn-condition)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = normal): do-not-warn;
        -- 10000.0        --warn*best*safety-condition (state_operator_name,state_error-info_warn-condition)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = safety): warn;
        -- 1.569174147        --warn*select*high*gps (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = gps): warn;
        --do-not-warn*select*high*lidar (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = lidar): do-not-warn;
        --do-not-warn*select*high*gps (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = gps): do-not-warn;
        --do-not-warn*select*low*imu (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = low & state_error-info_error = imu): do-not-warn;
        --do-not-warn*select*low*lidar (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = low & state_error-info_error = lidar): do-not-warn;
        --do-not-warn*select*low*gps (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = low & state_error-info_error = gps): do-not-warn;
        --warn*select*high*imu (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = imu): warn;
        --warn*select*high*lidar (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = lidar): warn;
        --do-not-warn*select*high*imu (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = high & state_error-info_error = imu): do-not-warn;
        --warn*select*low*imu (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = low & state_error-info_error = imu): warn;
        --warn*select*low*lidar (state_operator_name,state_operator_error-info,state_operator_error-info_warn-condition,state_operator_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_operator_error-info_warn-condition = low & state_operator_error-info_error = lidar): warn;
        --combined-warn-propose-do-not-warn-propose (state_error-info,state_warning-issued,state_error-info_value-changed,state_error-info_warn-condition)
        (state = run & state_warning-issued = nil & state_error-info_value-changed = true & state_error-info_warn-condition != nil): combined-warn-propose-do-not-warn-propose;
        --record-changed-error*propose (state_error-info,state_error-info_current-value,state_error-info_old-value,state_error-info_value-changed)
        (state = run & state_error-info_old-value != state_error-info_current-value & state_error-info_value-changed = nil): record-changed-error;
        --do-not-warn*when-warning-issued*propose (state_error-info,state_warning-issued,state_error-info_value-changed,state_error-info_warn-condition)
        (state = run & state_warning-issued != nil & state_error-info_value-changed = true & state_error-info_warn-condition != nil): do-not-warn;
        -- -1.6409953320300001        --warn*select*low*gps (state_operator_name,state_error-info,state_error-info_warn-condition,state_error-info_error)
        (state = run & state_operator_name = combined-warn-propose-do-not-warn-propose & state_error-info_warn-condition = low & state_error-info_error = gps): warn;
            TRUE : state_operator_name;
            esac;
TRANS
        next (state_safety-error) =
            case

        --top-state*elaborate*safety-error (state_superstate)
        (state_superstate = nil & state_safety-error != 10.0): 10.0;
            TRUE : state_safety-error;
                esac;
TRANS
        next (state_error-info_warn-condition) =
            case

        --top-state*elaborate*error-info*warn-condition*safety (state_flight-mode,state_safety-error,state_error-info,state_error-info_error,state_error-info_current-value)
        (state_flight-mode = horizontal & state_error-info_current-value > state_safety-error & state_error-info_warn-condition != safety): safety;
        --top-state*elaborate*error-info*warn-condition*high (state_flight-mode,state_high-low-warn-error,state_error-info,state_error-info_error,state_error-info_current-value,state_error-info_warn-condition)
        (state_flight-mode = horizontal & state_error-info_current-value > state_high-low-warn-error & state_error-info_warn-condition != safety & state_error-info_warn-condition != high): high;
        --top-state*elaborate*error-info*warn-condition*low (state_flight-mode,state_normal-error,state_error-info,state_error-info_error,state_error-info_current-value,state_error-info_warn-condition,state_error-info_warn-condition)
        (state_flight-mode = horizontal & state_error-info_current-value > state_normal-error & state_error-info_warn-condition != safety & state_error-info_warn-condition != high & state_error-info_warn-condition != low): low;
            TRUE : state_error-info_warn-condition;
                esac;
TRANS
        next (state_high-low-warn-error) =
            case

        --top-state*elaborate*high-low-warn-error (state_superstate)
        (state_superstate = nil & state_high-low-warn-error != 9.0): 9.0;
            TRUE : state_high-low-warn-error;
                esac;
TRANS
        next (state_normal-error) =
            case

        --top-state*elaborate*normal-error (state_superstate)
        (state_superstate = nil & state_normal-error != 8.0): 8.0;
            TRUE : state_normal-error;
                esac;
TRANS
        next (state_warning-issued) =
            case

        --warn*apply*issue-warning (state_warning-issued,state_io_alert-sensor-error,state_io_alert-sensor-error-value,state_operator_name,state_error-info,state_error-info_error,state_error-info_old-value,state_error-info_value-changed,state_error-info_warning-accepted)
        (state = run & state_warning-issued = nil & state_operator_name = warn & state_error-info_value-changed = true & state_error-info_warning-accepted = nil): state_error-info_error;
            TRUE : state_warning-issued;
                esac;
TRANS
        next (state_error-info_value-changed) =
            case

        --warn*apply*issue-warning (state_warning-issued,state_io_alert-sensor-error,state_io_alert-sensor-error-value,state_operator_name,state_error-info,state_error-info_error,state_error-info_old-value,state_error-info_value-changed,state_error-info_warning-accepted)
        (state = run & state_warning-issued = nil & state_operator_name = warn & state_error-info_value-changed = true & state_error-info_warning-accepted = nil): nil;
        --record-changed-error*apply*new-old-value (state_operator_name,state_error-info,state_value,state_error-info_error,state_error-info_old-value,state_error-info_value-changed)
        (state = run & state_operator_name = record-changed-error & state_error-info_old-value < 0.0 & state_error-info_value-changed = nil): true;
            TRUE : state_error-info_value-changed;
                esac;
TRANS
        next (state_operator_name_error-info) =
            case

        --combined-warn-propose-do-not-warn-propose (state_error-info,state_warning-issued,state_error-info_value-changed,state_error-info_warn-condition)
        (state = run & state_warning-issued = nil & state_error-info_value-changed = true & state_error-info_warn-condition != nil): state_error-info;
            TRUE : state_operator_name_error-info;
                esac;
TRANS
        next (state_io_alert-sensor-error) =
            case

        --warn*apply*issue-warning (state_warning-issued,state_io_alert-sensor-error,state_io_alert-sensor-error-value,state_operator_name,state_error-info,state_error-info_error,state_error-info_old-value,state_error-info_value-changed,state_error-info_warning-accepted)
        (state = run & state_warning-issued = nil & state_operator_name = warn & state_error-info_value-changed = true & state_error-info_warning-accepted = nil): state_error-info_error;
            TRUE : state_io_alert-sensor-error;
                esac;
TRANS
        next (state_io_alert-sensor-error-value) =
            case

        --warn*apply*issue-warning (state_warning-issued,state_io_alert-sensor-error,state_io_alert-sensor-error-value,state_operator_name,state_error-info,state_error-info_error,state_error-info_old-value,state_error-info_value-changed,state_error-info_warning-accepted)
        (state = run & state_warning-issued = nil & state_operator_name = warn & state_error-info_value-changed = true & state_error-info_warning-accepted = nil): nil;
            TRUE : state_io_alert-sensor-error-value;
                esac;
TRANS
        next (state_error-info_old-value) =
            case

        --record-changed-error*apply*remove-old-value (state_operator_name,state_error-info,state_value,state_error-info_error,state_error-info_old-value,state_error-info_value-changed)
        (state = run & state_operator_name = record-changed-error & state_error-info_value-changed = nil): nil;
        --record-changed-error*apply*new-old-value (state_operator_name,state_error-info,state_value,state_error-info_error,state_error-info_old-value,state_error-info_value-changed)
        (state = run & state_operator_name = record-changed-error & state_error-info_old-value < 0.0 & state_error-info_value-changed = nil): state_value;
            TRUE : state_error-info_old-value;
                esac;
TRANS
        next (state_io_alert-sensor-error_alert-sensor-error-value) =
            case

        --warn*apply*issue-warning (state_warning-issued,state_io_alert-sensor-error,state_io_alert-sensor-error-value,state_operator_name,state_error-info,state_error-info_error,state_error-info_old-value,state_error-info_value-changed,state_error-info_warning-accepted)
        (state = run & state_warning-issued = nil & state_operator_name = warn & state_error-info_value-changed = true & state_error-info_warning-accepted = nil): state_error-info_old-value;
            TRUE : state_io_alert-sensor-error_alert-sensor-error-value;
                esac;

