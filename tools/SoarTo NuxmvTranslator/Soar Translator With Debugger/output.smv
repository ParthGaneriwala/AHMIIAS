MODULE main

VAR state_flight-mode : {nil,horizontal};
VAR state_gps-error-info : {nil};
VAR state_gps-error-info_current-value : real;
VAR state_gps-error-info_current-value_exists : {yes,no};
VAR state_safety-error : real;
VAR state_safety-error_exists : {yes,no};
VAR state_gps-error-info_warn-condition : {safety,nil,high,low,normal};
VAR state_lidar-error-info : {nil};
VAR state_lidar-error-info_current-value : real;
VAR state_lidar-error-info_current-value_exists : {yes,no};
VAR state_lidar-error-info_warn-condition : {safety,nil,high,low,normal};
VAR state_imu-error-info : {nil};
VAR state_imu-error-info_current-value : real;
VAR state_imu-error-info_current-value_exists : {yes,no};
VAR state_imu-error-info_warn-condition : {safety,nil,high,low,normal};
VAR state_high-low-warn-error : real;
VAR state_high-low-warn-error_exists : {yes,no};
VAR state_normal-error : real;
VAR state_normal-error_exists : {yes,no};
VAR state_gps-error-info_value-changed : {nil,true};
VAR state_gps-error-info_old-value : real;
VAR state_gps-error-info_old-value_exists : {yes,no};
VAR state_operator_name : {record-changed-error,warn,do-not-warn,record-user-response,nil,combined-warn-propose-gps-do-not-warn-propose-gps};
VAR state_lidar-error-info_value-changed : {nil,true};
VAR state_lidar-error-info_old-value : real;
VAR state_lidar-error-info_old-value_exists : {yes,no};
VAR state_imu-error-info_value-changed : {nil,true};
VAR state_imu-error-info_old-value : real;
VAR state_imu-error-info_old-value_exists : {yes,no};
VAR state_gps-error-info_warning-issued : {nil};
VAR state_lidar-error-info_warning-issued : {nil};
VAR state_imu-error-info_warning-issued : {nil};
VAR state_warning-issued : {nil,gps,lidar,imu};
VAR state_gps-error-info_warning-accepted : {nil};
VAR state_io_sensor-alert-accepted : {nil};
VAR state_lidar-error-info_warning-accepted : {nil};
VAR state_imu-error-info_warning-accepted : {nil};
VAR state_error-info : {nil};
VAR state_error-info_error : {nil,gps,imu,lidar};
VAR state_error-info_current-value : {nil};
VAR state_error-info_warn-condition : {safety,nil,low,high};
VAR state_superstate : {nil};
VAR state_operator_error-info : {nil};
VAR state_operator_error-info_error : {nil,lidar};
VAR state_operator_error-info_warn-condition : {nil,low};
VAR state_error-info_value-changed : {nil,true};
VAR state_error-info_old-value : {nil};
VAR state_value : {nil};


ASSIGN
    init (state_flight-mode) := nil;
    init (state_gps-error-info_current-value) := 0.0;
    init (state_gps-error-info_current-value_exists) := no;
    init (state_safety-error) := 10.0;
    init (state_safety-error_exists) := no;
    init (state_gps-error-info_warn-condition) := nil;
    init (state_lidar-error-info_current-value) := 0.0;
    init (state_lidar-error-info_current-value_exists) := no;
    init (state_lidar-error-info_warn-condition) := nil;
    init (state_imu-error-info_current-value) := 0.0;
    init (state_imu-error-info_current-value_exists) := no;
    init (state_imu-error-info_warn-condition) := nil;
    init (state_high-low-warn-error) := 9.0;
    init (state_high-low-warn-error_exists) := no;
    init (state_normal-error) := 8.0;
    init (state_normal-error_exists) := no;
    init (state_gps-error-info_value-changed) := nil;
    init (state_gps-error-info_old-value) := 0.0;
    init (state_gps-error-info_old-value_exists) := no;
    init (state_operator_name) := nil;
    init (state_lidar-error-info_value-changed) := nil;
    init (state_lidar-error-info_old-value) := 0.0;
    init (state_lidar-error-info_old-value_exists) := no;
    init (state_imu-error-info_value-changed) := nil;
    init (state_imu-error-info_old-value) := 0.0;
    init (state_imu-error-info_old-value_exists) := no;
    init (state_warning-issued) := nil;
    init (state_error-info_error) := nil;
    init (state_error-info_warn-condition) := nil;
    init (state_operator_error-info_error) := nil;
    init (state_operator_error-info_warn-condition) := nil;
    init (state_error-info_value-changed) := nil;


VAR soarAgent : soarRules(state_flight-mode,state_gps-error-info,state_gps-error-info_current-value,state_gps-error-info_current-value_exists,state_safety-error,state_safety-error_exists,state_gps-error-info_warn-condition,state_lidar-error-info,state_lidar-error-info_current-value,state_lidar-error-info_current-value_exists,state_lidar-error-info_warn-condition,state_imu-error-info,state_imu-error-info_current-value,state_imu-error-info_current-value_exists,state_imu-error-info_warn-condition,state_high-low-warn-error,state_high-low-warn-error_exists,state_normal-error,state_normal-error_exists,state_gps-error-info_value-changed,state_gps-error-info_old-value,state_gps-error-info_old-value_exists,state_operator_name,state_lidar-error-info_value-changed,state_lidar-error-info_old-value,state_lidar-error-info_old-value_exists,state_imu-error-info_value-changed,state_imu-error-info_old-value,state_imu-error-info_old-value_exists,state_gps-error-info_warning-issued,state_lidar-error-info_warning-issued,state_imu-error-info_warning-issued,state_warning-issued,state_gps-error-info_warning-accepted,state_io_sensor-alert-accepted,state_lidar-error-info_warning-accepted,state_imu-error-info_warning-accepted,state_error-info,state_error-info_error,state_error-info_current-value,state_error-info_warn-condition,state_superstate,state_operator_error-info,state_operator_error-info_error,state_operator_error-info_warn-condition,state_error-info_value-changed,state_error-info_old-value,state_value);

MODULE soarRules(state_flight-mode,state_gps-error-info,state_gps-error-info_current-value,state_gps-error-info_current-value_exists,state_safety-error,state_safety-error_exists,state_gps-error-info_warn-condition,state_lidar-error-info,state_lidar-error-info_current-value,state_lidar-error-info_current-value_exists,state_lidar-error-info_warn-condition,state_imu-error-info,state_imu-error-info_current-value,state_imu-error-info_current-value_exists,state_imu-error-info_warn-condition,state_high-low-warn-error,state_high-low-warn-error_exists,state_normal-error,state_normal-error_exists,state_gps-error-info_value-changed,state_gps-error-info_old-value,state_gps-error-info_old-value_exists,state_operator_name,state_lidar-error-info_value-changed,state_lidar-error-info_old-value,state_lidar-error-info_old-value_exists,state_imu-error-info_value-changed,state_imu-error-info_old-value,state_imu-error-info_old-value_exists,state_gps-error-info_warning-issued,state_lidar-error-info_warning-issued,state_imu-error-info_warning-issued,state_warning-issued,state_gps-error-info_warning-accepted,state_io_sensor-alert-accepted,state_lidar-error-info_warning-accepted,state_imu-error-info_warning-accepted,state_error-info,state_error-info_error,state_error-info_current-value,state_error-info_warn-condition,state_superstate,state_operator_error-info,state_operator_error-info_error,state_operator_error-info_warn-condition,state_error-info_value-changed,state_error-info_old-value,state_value)

VAR state:{start, run};
ASSIGN
        init (state) := start;
        next (state) :=
            case
        --record-changed-error*propose*gps (state_gps-error-info,state_gps-error-info_value-changed,state_gps-error-info_current-value,state_gps-error-info_current-value_exists,state_gps-error-info_old-value,state_gps-error-info_old-value_exists)
        state = start & (state_gps-error-info_value-changed != true & state_gps-error-info_old-value != state_gps-error-info_current-value) : run;
        --record-changed-error*propose*lidar (state_lidar-error-info,state_lidar-error-info_value-changed,state_lidar-error-info_current-value,state_lidar-error-info_current-value_exists,state_lidar-error-info_old-value,state_lidar-error-info_old-value_exists)
        state = start & (state_lidar-error-info_value-changed != true & state_lidar-error-info_old-value != state_lidar-error-info_current-value) : run;
        --record-changed-error*propose*imu (state_imu-error-info,state_imu-error-info_value-changed,state_imu-error-info_current-value,state_imu-error-info_current-value_exists,state_imu-error-info_old-value,state_imu-error-info_old-value_exists)
        state = start & (state_imu-error-info_value-changed != true & state_imu-error-info_old-value != state_imu-error-info_current-value) : run;
        --warn*propose*lidar (state_lidar-error-info,state_lidar-error-info_warning-issued,state_lidar-error-info_value-changed,state_lidar-error-info_warn-condition)
        state = start & (state_lidar-error-info_value-changed = true) : run;
        --warn*propose*imu (state_imu-error-info,state_imu-error-info_warning-issued,state_imu-error-info_value-changed,state_imu-error-info_warn-condition)
        state = start & (state_imu-error-info_value-changed = true) : run;
        --do-not-warn*propose*lidar (state_lidar-error-info,state_lidar-error-info_value-changed,state_lidar-error-info_warn-condition)
        state = start & (state_lidar-error-info_value-changed = true) : run;
        --do-not-warn*propose*imu (state_imu-error-info,state_imu-error-info_value-changed,state_imu-error-info_warn-condition)
        state = start & (state_imu-error-info_value-changed = true) : run;
        --propose*record-user-response*gps (state_warning-issued,state_flight-mode,state_gps-error-info,state_gps-error-info_warning-accepted,state_io_sensor-alert-accepted,state_io_sensor-alert-accepted)
        state = start & (state_warning-issued = gps & state_flight-mode = horizontal & state_io_sensor-alert-accepted <> nil) : run;
        --propose*record-user-response*lidar (state_warning-issued,state_flight-mode,state_lidar-error-info,state_lidar-error-info_warning-accepted,state_io_sensor-alert-accepted,state_io_sensor-alert-accepted)
        state = start & (state_warning-issued = lidar & state_flight-mode = horizontal & state_io_sensor-alert-accepted <> nil) : run;
        --propose*record-user-response*imu (state_warning-issued,state_flight-mode,state_imu-error-info,state_imu-error-info_warning-accepted,state_io_sensor-alert-accepted,state_io_sensor-alert-accepted)
        state = start & (state_warning-issued = imu & state_flight-mode = horizontal & state_io_sensor-alert-accepted <> nil) : run;
        --warn*select*low*gps (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = gps & state_error-info_warn-condition = low & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --warn*select*low*lidar (state_operator_name,state_operator_error-info,state_operator_error-info_error,state_operator_error-info_warn-condition)
        state = start & (state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps & state_operator_error-info_error = lidar & state_operator_error-info_warn-condition = low) : run;
        --warn*select*low*imu (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = imu & state_error-info_warn-condition = low & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --warn*select*high*gps (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = gps & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --warn*select*high*lidar (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = lidar & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --warn*select*high*imu (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = imu & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --do-not-warn*select*low*gps (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = gps & state_error-info_warn-condition = low & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --do-not-warn*select*low*lidar (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = lidar & state_error-info_warn-condition = low & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --do-not-warn*select*low*imu (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = imu & state_error-info_warn-condition = low & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --do-not-warn*select*high*gps (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = gps & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --do-not-warn*select*high*lidar (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = lidar & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --do-not-warn*select*high*imu (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        state = start & (state_error-info_error = imu & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps) : run;
        --record-changed-error*apply*remove-old-value (state_error-info,state_error-info_value-changed,state_operator_name,state_error-info_error,state_error-info_old-value,state_value)
        state = start & (state_operator_name = record-changed-error) : run;
        --record-changed-error*apply*new-old-value (state_error-info,state_error-info_value-changed,state_error-info_old-value,state_operator_name,state_error-info_error,state_value)
        state = start & (state_operator_name = record-changed-error) : run;
        --do-not-warn*apply*value-changed*remove (state_error-info,state_error-info_value-changed,state_operator_name,state_error-info_error)
        state = start & (state_error-info_value-changed = true & state_operator_name = do-not-warn) : run;
        --combined-warn-propose-gps-do-not-warn-propose-gps (state_gps-error-info,state_gps-error-info_warning-issued,state_gps-error-info_value-changed,state_gps-error-info_warn-condition)
        state = start & (state_gps-error-info_value-changed = true) : run;
        state = run : start;
            TRUE : state;
            esac;
TRANS
        next (state_operator_name) =
            case

        -- 10000.0        --propose*record-user-response*imu (state_warning-issued,state_flight-mode,state_imu-error-info,state_imu-error-info_warning-accepted,state_io_sensor-alert-accepted,state_io_sensor-alert-accepted)
        (state = run & state_warning-issued = imu & state_flight-mode = horizontal & state_io_sensor-alert-accepted <> nil): record-user-response;
        -- 10000.0        --propose*record-user-response*lidar (state_warning-issued,state_flight-mode,state_lidar-error-info,state_lidar-error-info_warning-accepted,state_io_sensor-alert-accepted,state_io_sensor-alert-accepted)
        (state = run & state_warning-issued = lidar & state_flight-mode = horizontal & state_io_sensor-alert-accepted <> nil): record-user-response;
        -- 10000.0        --propose*record-user-response*gps (state_warning-issued,state_flight-mode,state_gps-error-info,state_gps-error-info_warning-accepted,state_io_sensor-alert-accepted,state_io_sensor-alert-accepted)
        (state = run & state_warning-issued = gps & state_flight-mode = horizontal & state_io_sensor-alert-accepted <> nil): record-user-response;
        -- 1.6516096488832517        --do-not-warn*select*low*lidar (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = lidar & state_error-info_warn-condition = low & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): do-not-warn;
        -- 1.569174147        --warn*select*high*gps (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = gps & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): warn;
        -- 1.5099999995743285        --warn*select*high*imu (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = imu & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): warn;
        -- 1.5099999995743285        --warn*select*high*lidar (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = lidar & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): warn;
        -- 0.102920856510583        --warn*select*low*imu (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = imu & state_error-info_warn-condition = low & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): warn;
        -- 0.102920856510583        --warn*select*low*lidar (state_operator_name,state_operator_error-info,state_operator_error-info_error,state_operator_error-info_warn-condition)
        (state = run & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps & state_operator_error-info_error = lidar & state_operator_error-info_warn-condition = low): warn;
        --do-not-warn*select*low*imu (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = imu & state_error-info_warn-condition = low & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): do-not-warn;
        --do-not-warn*select*high*gps (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = gps & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): do-not-warn;
        --do-not-warn*select*low*gps (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = gps & state_error-info_warn-condition = low & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): do-not-warn;
        --combined-warn-propose-gps-do-not-warn-propose-gps (state_gps-error-info,state_gps-error-info_warning-issued,state_gps-error-info_value-changed,state_gps-error-info_warn-condition)
        (state = run & state_gps-error-info_value-changed = true): combined-warn-propose-gps-do-not-warn-propose-gps;
        --do-not-warn*select*high*imu (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = imu & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): do-not-warn;
        --do-not-warn*select*high*lidar (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = lidar & state_error-info_warn-condition = high & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): do-not-warn;
        --do-not-warn*propose*imu (state_imu-error-info,state_imu-error-info_value-changed,state_imu-error-info_warn-condition)
        (state = run & state_imu-error-info_value-changed = true): do-not-warn;
        --do-not-warn*propose*lidar (state_lidar-error-info,state_lidar-error-info_value-changed,state_lidar-error-info_warn-condition)
        (state = run & state_lidar-error-info_value-changed = true): do-not-warn;
        --warn*propose*imu (state_imu-error-info,state_imu-error-info_warning-issued,state_imu-error-info_value-changed,state_imu-error-info_warn-condition)
        (state = run & state_imu-error-info_value-changed = true): warn;
        --warn*propose*lidar (state_lidar-error-info,state_lidar-error-info_warning-issued,state_lidar-error-info_value-changed,state_lidar-error-info_warn-condition)
        (state = run & state_lidar-error-info_value-changed = true): warn;
        --record-changed-error*propose*imu (state_imu-error-info,state_imu-error-info_value-changed,state_imu-error-info_current-value,state_imu-error-info_current-value_exists,state_imu-error-info_old-value,state_imu-error-info_old-value_exists)
        (state = run & state_imu-error-info_value-changed != true & state_imu-error-info_old-value != state_imu-error-info_current-value): record-changed-error;
        --record-changed-error*propose*lidar (state_lidar-error-info,state_lidar-error-info_value-changed,state_lidar-error-info_current-value,state_lidar-error-info_current-value_exists,state_lidar-error-info_old-value,state_lidar-error-info_old-value_exists)
        (state = run & state_lidar-error-info_value-changed != true & state_lidar-error-info_old-value != state_lidar-error-info_current-value): record-changed-error;
        --record-changed-error*propose*gps (state_gps-error-info,state_gps-error-info_value-changed,state_gps-error-info_current-value,state_gps-error-info_current-value_exists,state_gps-error-info_old-value,state_gps-error-info_old-value_exists)
        (state = run & state_gps-error-info_value-changed != true & state_gps-error-info_old-value != state_gps-error-info_current-value): record-changed-error;
        -- -1.6409953320300001        --warn*select*low*gps (state_error-info,state_error-info_error,state_error-info_warn-condition,state_operator_name)
        (state = run & state_error-info_error = gps & state_error-info_warn-condition = low & state_operator_name = combined-warn-propose-gps-do-not-warn-propose-gps): warn;
            TRUE : state_operator_name;
            esac;
TRANS
        next (state_safety-error) =
            case

        --top-state*elaborate*safety-error (state_superstate)
        (state_superstate = nil & state_safety-error_exists != yes & state_safety-error != 10.0): 10.0;
            TRUE : state_safety-error;
                esac;
TRANS
        next (state_safety-error_exists) =
            case

        --top-state*elaborate*safety-error (state_superstate)
        (state_superstate = nil & state_safety-error_exists != yes & state_safety-error != 10.0): yes;
            TRUE : state_safety-error_exists;
                esac;
TRANS
        next (state_gps-error-info_warn-condition) =
            case

        --top-state*elaborate*error-info*warn-condition*safety*gps (state_flight-mode,state_gps-error-info,state_gps-error-info_current-value,state_gps-error-info_current-value_exists,state_safety-error,state_safety-error_exists)
        (state_flight-mode = horizontal & state_gps-error-info_warn-condition != safety): safety;
        --top-state*elaborate*error-info*warn-condition*high*gps (state_flight-mode,state_gps-error-info,state_gps-error-info_warn-condition,state_high-low-warn-error,state_high-low-warn-error_exists,state_gps-error-info_current-value,state_gps-error-info_current-value_exists)
        (state_flight-mode = horizontal & state_gps-error-info_warn-condition != safety & state_gps-error-info_current-value > state_high-low-warn-error & state_gps-error-info_warn-condition != high): high;
        --top-state*elaborate*error-info*warn-condition*low*gps (state_flight-mode,state_gps-error-info,state_gps-error-info_warn-condition,state_gps-error-info_warn-condition,state_normal-error,state_normal-error_exists,state_gps-error-info_current-value,state_gps-error-info_current-value_exists)
        (state_flight-mode = horizontal & state_gps-error-info_warn-condition != high & state_gps-error-info_warn-condition != safety & state_gps-error-info_current-value > state_normal-error & state_gps-error-info_warn-condition != low): low;
        --top-state*elaborate*error-info*warn-condition*normal*gps (state_flight-mode,state_gps-error-info,state_gps-error-info_warn-condition,state_gps-error-info_warn-condition,state_gps-error-info_warn-condition)
        (state_flight-mode = horizontal & state_gps-error-info_warn-condition != low & state_gps-error-info_warn-condition != high & state_gps-error-info_warn-condition != safety & state_gps-error-info_warn-condition != normal): normal;
            TRUE : state_gps-error-info_warn-condition;
                esac;
TRANS
        next (state_lidar-error-info_warn-condition) =
            case

        --top-state*elaborate*error-info*warn-condition*safety*lidar (state_flight-mode,state_lidar-error-info,state_lidar-error-info_current-value,state_lidar-error-info_current-value_exists,state_safety-error,state_safety-error_exists)
        (state_flight-mode = horizontal & state_lidar-error-info_warn-condition != safety): safety;
        --top-state*elaborate*error-info*warn-condition*high*lidar (state_flight-mode,state_lidar-error-info,state_lidar-error-info_warn-condition,state_high-low-warn-error,state_high-low-warn-error_exists,state_lidar-error-info_current-value,state_lidar-error-info_current-value_exists)
        (state_flight-mode = horizontal & state_lidar-error-info_warn-condition != safety & state_lidar-error-info_current-value > state_high-low-warn-error & state_lidar-error-info_warn-condition != high): high;
        --top-state*elaborate*error-info*warn-condition*low*lidar (state_flight-mode,state_lidar-error-info,state_lidar-error-info_warn-condition,state_lidar-error-info_warn-condition,state_normal-error,state_normal-error_exists,state_lidar-error-info_current-value,state_lidar-error-info_current-value_exists)
        (state_flight-mode = horizontal & state_lidar-error-info_warn-condition != high & state_lidar-error-info_warn-condition != safety & state_lidar-error-info_current-value > state_normal-error & state_lidar-error-info_warn-condition != low): low;
        --top-state*elaborate*error-info*warn-condition*normal*lidar (state_flight-mode,state_lidar-error-info,state_lidar-error-info_warn-condition,state_lidar-error-info_warn-condition,state_lidar-error-info_warn-condition)
        (state_flight-mode = horizontal & state_lidar-error-info_warn-condition != low & state_lidar-error-info_warn-condition != high & state_lidar-error-info_warn-condition != safety & state_lidar-error-info_warn-condition != normal): normal;
            TRUE : state_lidar-error-info_warn-condition;
                esac;
TRANS
        next (state_imu-error-info_warn-condition) =
            case

        --top-state*elaborate*error-info*warn-condition*safety*imu (state_flight-mode,state_imu-error-info,state_imu-error-info_current-value,state_imu-error-info_current-value_exists,state_safety-error,state_safety-error_exists)
        (state_flight-mode = horizontal & state_imu-error-info_warn-condition != safety): safety;
        --top-state*elaborate*error-info*warn-condition*high*imu (state_flight-mode,state_imu-error-info,state_imu-error-info_warn-condition,state_high-low-warn-error,state_high-low-warn-error_exists,state_imu-error-info_current-value,state_imu-error-info_current-value_exists)
        (state_flight-mode = horizontal & state_imu-error-info_warn-condition != safety & state_imu-error-info_current-value > state_high-low-warn-error & state_imu-error-info_warn-condition != high): high;
        --top-state*elaborate*error-info*warn-condition*low*imu (state_flight-mode,state_imu-error-info,state_imu-error-info_warn-condition,state_imu-error-info_warn-condition,state_normal-error,state_normal-error_exists,state_imu-error-info_current-value,state_imu-error-info_current-value_exists)
        (state_flight-mode = horizontal & state_imu-error-info_warn-condition != high & state_imu-error-info_warn-condition != safety & state_imu-error-info_current-value > state_normal-error & state_imu-error-info_warn-condition != low): low;
        --top-state*elaborate*error-info*warn-condition*normal*imu (state_flight-mode,state_imu-error-info,state_imu-error-info_warn-condition,state_imu-error-info_warn-condition,state_imu-error-info_warn-condition)
        (state_flight-mode = horizontal & state_imu-error-info_warn-condition != low & state_imu-error-info_warn-condition != high & state_imu-error-info_warn-condition != safety & state_imu-error-info_warn-condition != normal): normal;
            TRUE : state_imu-error-info_warn-condition;
                esac;
TRANS
        next (state_high-low-warn-error) =
            case

        --top-state*elaborate*high-low-warn-error (state_superstate)
        (state_superstate = nil & state_high-low-warn-error_exists != yes & state_high-low-warn-error != 9.0): 9.0;
            TRUE : state_high-low-warn-error;
                esac;
TRANS
        next (state_high-low-warn-error_exists) =
            case

        --top-state*elaborate*high-low-warn-error (state_superstate)
        (state_superstate = nil & state_high-low-warn-error_exists != yes & state_high-low-warn-error != 9.0): yes;
            TRUE : state_high-low-warn-error_exists;
                esac;
TRANS
        next (state_normal-error) =
            case

        --top-state*elaborate*normal-error (state_superstate)
        (state_superstate = nil & state_normal-error_exists != yes & state_normal-error != 8.0): 8.0;
            TRUE : state_normal-error;
                esac;
TRANS
        next (state_normal-error_exists) =
            case

        --top-state*elaborate*normal-error (state_superstate)
        (state_superstate = nil & state_normal-error_exists != yes & state_normal-error != 8.0): yes;
            TRUE : state_normal-error_exists;
                esac;
TRANS
        next (state_error-info_warn-condition) =
            case

        --top-state*elaborate*error-info*warn-condition*safety (state_flight-mode,state_error-info,state_error-info_error,state_error-info_current-value,state_safety-error,state_safety-error_exists)
        (state_flight-mode = horizontal & state_error-info_warn-condition != safety): safety;
            TRUE : state_error-info_warn-condition;
                esac;
TRANS
        next (state_error-info_value-changed) =
            case

        --record-changed-error*apply*new-old-value (state_error-info,state_error-info_value-changed,state_error-info_old-value,state_operator_name,state_error-info_error,state_value)
        (state = start & state_operator_name = record-changed-error): true;
        --do-not-warn*apply*value-changed*remove (state_error-info,state_error-info_value-changed,state_operator_name,state_error-info_error)
        (state = start & state_error-info_value-changed = true & state_operator_name = do-not-warn): nil;
            TRUE : state_error-info_value-changed;
                esac;
TRANS
        next (state_error-info_old-value) =
            case

        --record-changed-error*apply*remove-old-value (state_error-info,state_error-info_value-changed,state_operator_name,state_error-info_error,state_error-info_old-value,state_value)
        (state = start & state_operator_name = record-changed-error): nil;
        --record-changed-error*apply*new-old-value (state_error-info,state_error-info_value-changed,state_error-info_old-value,state_operator_name,state_error-info_error,state_value)
        (state = start & state_operator_name = record-changed-error): state_value;
            TRUE : state_error-info_old-value;
                esac;

